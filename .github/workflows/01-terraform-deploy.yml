name: 01 - Deploy S3 Infrastructure with Terraform

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.12.2'
  WORKING_DIR: 'infra/terraform/s3'
  BUCKET_DATA: ${{ vars.BUCKET_DATA }}
  BUCKET_STATE: ${{ vars.BUCKET_STATE }}
  STATE_PREFIX: ${{ vars.STATE_PREFIX }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  TERRAFORM_ROLE_NAME: ${{ vars.TERRAFORM_ROLE_NAME }}
  WRITER_POLICY_ARN: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:policy/${{ vars.BUCKET_DATA }}-writer

jobs:
  terraform:
    name: Terraform ${{ github.event.inputs.action }}
    runs-on: ubuntu-latest
    environment: dev
    
    permissions:
      id-token: write
      contents: read
      pull-requests: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.TERRAFORM_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format (write)
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform fmt -recursive

      - name: Preflight — AWS identity & S3 access
        run: |
          set -euo pipefail
          echo "Caller identity (should be your OIDC role):"
          aws sts get-caller-identity

          echo "State bucket exists?"
          aws s3api head-bucket --bucket "${{ env.BUCKET_STATE }}"

          echo "List state prefix (OK if empty before first apply):"
          aws s3 ls "s3://${{ env.BUCKET_STATE }}/${{ env.STATE_PREFIX }}/" || true

          echo "Data bucket exists?"
          aws s3api head-bucket --bucket "${{ env.BUCKET_DATA }}"

          echo "Optional: current public access block (may be empty before TF configures it):"
          aws s3api get-public-access-block --bucket "${{ env.BUCKET_DATA }}" || echo "no public access block yet"

          echo "Optional: current encryption (may be empty before TF configures it):"
          aws s3api get-bucket-encryption --bucket "${{ env.BUCKET_DATA }}" || echo "no encryption yet"

      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terraform init \
            -input=false \
            -backend-config="bucket=${{ env.BUCKET_STATE }}" \
            -backend-config="key=${{ env.STATE_PREFIX }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Format Check
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform fmt -check
        continue-on-error: true
        
      - name: Terraform Validate
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform validate
        
      - name: Verify AWS Identity
        run: |
          aws sts get-caller-identity

      - name: Terraform Plan
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        working-directory: ${{ env.WORKING_DIR }}
        id: plan
        run: |
          terraform plan -var="bucket_name=${{ env.BUCKET_DATA }}" \
                        -var="aws_region=${{ env.AWS_REGION }}" \
                        -out=tfplan
                        
      - name: Upload Terraform Plan
        if: github.event.inputs.action == 'plan'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: ${{ env.WORKING_DIR }}/tfplan
          
      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terraform apply -auto-approve \
                         -var="bucket_name=${{ env.BUCKET_DATA }}" \
                         -var="aws_region=${{ env.AWS_REGION }}"
                         -var="create_writer_policy=true"

      - name: Post-apply — verify remote state & IAM
        if: ${{ inputs.action == 'apply' || github.event.inputs.action == 'apply' }}
        run: |
          set -euo pipefail

          echo "State object should exist now:"
          aws s3api head-object \
            --bucket "${{ env.BUCKET_STATE }}" \
            --key "${{ env.STATE_PREFIX }}/terraform.tfstate"

          echo "Writer policy should exist:"
          aws iam get-policy --policy-arn "${{ env.WRITER_POLICY_ARN }}"

          echo "Writer policy attachments (roles that have it):"
          aws iam list-entities-for-policy \
            --policy-arn "${{ env.WRITER_POLICY_ARN }}" \
            --query "PolicyRoles[].RoleName" \
            --output table

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          terraform destroy -auto-approve \
                           -var="bucket_name=${{ env.BUCKET_DATA }}" \
                           -var="aws_region=${{ env.AWS_REGION }}"
                           
      - name: Output Summary
        if: always()
        run: |
          echo "## Terraform ${{ github.event.inputs.action }} Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bucket**: ${{ env.BUCKET_DATA }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY